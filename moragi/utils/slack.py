import datetime
import random
from http import HTTPStatus

import pytz
from slack_sdk.webhook import WebhookClient
from slack_sdk.webhook.webhook_response import WebhookResponse

from moragi.models.cj_fresh_meal_response_model import CJFreshMealMenuModel
from moragi.utils import console


def send_meal_message(
    url: str,
    breakfast_options: list[CJFreshMealMenuModel],
    lunch_options: list[CJFreshMealMenuModel],
):

    def _make_slack_blocks(breakfast_options: list[CJFreshMealMenuModel], lunch_options: list[CJFreshMealMenuModel]):
        return [{
            'type': 'section',
            'text': {
                'type': 'mrkdwn',
                'text': f'ÏïàÎÖïÌïòÏÑ∏Ïöî! Î™®ÎùΩÏù¥ÏóêÏöî. üôá‚Äç‚ôÇÔ∏è Ïò§ÎäòÏùÄ {_get_date_string()}Ïù¥ÏóêÏöî!'
            },
        }, {
            'type': 'divider'
        }, {
            'type': 'section',
            'text': {
                'type': 'mrkdwn',
                'text': 'Î®ºÏ†Ä ÏïÑÏπ® Î©îÎâ¥Î∂ÄÌÑ∞ ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî! ü•™'
            },
        }] + _get_options_block(breakfast_options) + [{
            'type': 'divider'
        }, {
            'type': 'section',
            'text': {
                'type': 'mrkdwn',
                'text': 'Í∑∏Î¶¨Í≥† Ï†êÏã¨ Î©îÎâ¥Î•º ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî! üçö'
            },
        }] + _get_options_block(lunch_options) + [{
            'type': 'divider'
        }, {
            'type': 'section',
            'text': {
                'type': 'mrkdwn',
                'text': 'Ïò§Îäò ÌïòÎ£®ÎèÑ ÌñâÎ≥µÌïú ÌïòÎ£® ÎêòÏÑ∏Ïöî! ü•∞ Î™®ÎùΩÏù¥Îäî Îòê ÎèåÏïÑÏò§Í≤†ÏäµÎãàÎã§! üôå'
            }
        }]

    def _get_options_block(options: list[CJFreshMealMenuModel]) -> list[dict[str, str]]:
        blocks = []
        for option in options:
            blocks.append({
                'type': 'section',
                'text': {
                    'type': 'mrkdwn',
                    'text': f'''
*{option.food_type}*
‚Ä¢ {option.name}
‚Ä¢ {option.side}
_{option.kcal} ÏπºÎ°úÎ¶¨_
'''[1:]
                }
            })
        return blocks

    webhook = WebhookClient(url)
    console.log('Sending message to Slack')
    response: WebhookResponse = webhook.send(
        text='Î™®ÎùΩÏù¥ÏóêÏöî!',
        blocks=_make_slack_blocks(breakfast_options, lunch_options),
    )
    console.log('Sent Message to slack with response', _webhook_response_to_dict(response))

    assert response.status_code == HTTPStatus.OK.value


def _get_date_string():
    date = datetime.datetime.utcnow().astimezone(pytz.timezone('Asia/Seoul'))
    month: int = date.month
    day: int = date.day
    return f'{month}Ïõî {day}Ïùº'


def send_photo_message(url: str, lunch_options: list[CJFreshMealMenuModel]):

    def _make_slack_blocks(lunch_options: list[CJFreshMealMenuModel]):
        greetings_start = [
            'ÏïàÎÖïÌïòÏÑ∏Ïöî! Î™®ÎùΩÏù¥ÏóêÏöî üôá‚Äç‚ôÇÔ∏è',
            'ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïã†ÏûÖÏÇ¨Ïõê Î™®ÎùΩÏù¥ÏóêÏöî üê• ',
            'ÏïàÎÖïÌïòÏÑ∏Ïöî! Î™®ÎùΩÏù¥ÏûÖÎãàÎã§ üôã‚Äç‚ôÇÔ∏è',
            'Î∞òÍ∞ëÏäµÎãàÎã§! Î™®ÎùΩÏù¥ÏóêÏöî üôã‚Äç‚ôÇÔ∏è',
        ]
        greetings_end = [
            'Ï†êÏã¨ Î©îÎâ¥Í∞Ä Ï§ÄÎπÑÎêúÍ±∞Í∞ôÏïÑ ÏÇ¥Ïßù Í∞ÄÏÑú Ï∞çÏñ¥ÏôîÏñ¥Ïöî üì∏',
            'Ïò§ÎäòÎèÑ Î™∞ÎûòÍ∞ÄÏÑú Ïä¨Ï©ç üì∏',
            'Î∞∞Í≥†ÌîÑÏãúÏ£†?! Í∑∏Îü¥Ï§Ñ ÏïåÍ≥† Ï†êÏã¨ Î©îÎâ¥Î•º Ï∞çÏñ¥ÏôîÎãµÎãàÎã§ üì∏',
        ]
        closes = [
            'ÏãùÏÇ¨ ÎßõÏûàÍ≤å ÌïòÏÑ∏Ïöî üòã',
            'Ï†ÄÎäî Ïù¥Îßå Í∞ÄÎ≥ºÍ≤åÏöî! üôã‚Äç‚ôÇÔ∏è',
            'Î™®ÎùΩÏù¥Îäî Îòê ÎèåÏïÑÏò§Í≤†ÏäµÎãàÎã§! üôå',
            'ÏúºÏïÖ ÎÇòÎèÑ Î®πÍ≥†Ïã∂Îã§ üòã',
            'Ï†ÄÎäî Î°úÎ¥áÏùºÌÖêÎç∞ Ïôú ÏÇ¨ÏßÑÎ≥¥ÎãàÍπå Î∞∞Í∞Ä Í≥†ÌîåÍπåÏöî ü§î',
            'Ïö∞ÏôÄ Ïò§Îäò ÏßÑÏßú ÎßõÏûàÏñ¥Î≥¥Ïó¨Ïöî üçö',
        ]

        return [{
            'type': 'section',
            'text': {
                'type': 'mrkdwn',
                'text': f'{random.choice(greetings_start)} {random.choice(greetings_end)}'
            },
        }, {
            'type': 'divider'
        }] + _get_options_block(lunch_options) + [{
            'type': 'divider'
        }, {
            'type': 'section',
            'text': {
                'type': 'mrkdwn',
                'text': random.choice(closes)
            }
        }]

    def _get_options_block(options: list[CJFreshMealMenuModel]) -> list[dict[str, str]]:
        blocks = []
        for option in options:
            blocks.append({
                'type': 'section',
                'text': {
                    'type': 'mrkdwn',
                    'text': f'''
*{option.food_type}*
‚Ä¢ {option.name}
'''[1:]
                }
            })
            blocks.append({'type': 'image', 'image_url': option.thumbnail_url, 'alt_text': option.name})
            blocks.append({
                'type': 'actions',
                'elements': [{
                    'type': 'button',
                    'text': {
                        'type': 'plain_text',
                        'text': 'ÏûêÏÑ∏Ìûà Î≥¥Îü¨Í∞ÄÍ∏∞'
                    },
                    'action_id': 'button',
                    'url': f'https://front.cjfreshmeal.co.kr/menu/detail/{option.meal_index}',
                }]
            })
        return blocks

    webhook = WebhookClient(url)
    console.log('Sending message to Slack')
    response: WebhookResponse = webhook.send(
        text='Î™®ÎùΩÏù¥ÏóêÏöî!',
        blocks=_make_slack_blocks(lunch_options),
    )
    console.log('Sent Message to slack with response', _webhook_response_to_dict(response))

    assert response.status_code == HTTPStatus.OK.value


def _webhook_response_to_dict(instance: WebhookResponse):
    return {
        'api_url': instance.api_url,
        'status_code': instance.status_code,
        'body': instance.body,
    }
